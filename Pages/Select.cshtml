@page
@model SelectModel
@{
    ViewData["Title"] = "Select Images From File";
    var page = (int)(ViewData["page"]);
    var totalitems = (int)(ViewData["totalitems"]);
    var pagesize = (int)(ViewData["pagesize"]);
    var npages = Math.Ceiling(1.0 * totalitems/pagesize);
}

<div class="text-center" style="max-width: 1600px;">
    <h1>@ViewData["Title"]</h1>
    <p>
        @if (ViewData["folder"].ToString() == ""){
            <span class="badge badge-secondary">list</span> @(ViewData["list"]) <br/>
            <span class="badge badge-secondary">root</span> @(ViewData["root"]) <br/>
        } else{
            <span class="badge badge-secondary">folder</span> @(ViewData["folder"]) <br/>
        }
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-end">
                <li class="page-item @(page<=1?"disabled": "")" href="~/select?list=@(ViewData["list"])">
                    <a class="page-link" href="~/select?list=@(ViewData["list"])&root=@(ViewData["root"])&page=@(page-1)&pagesize=@(pagesize)">Previous</a>
                </li>
                <li class="page-item">
                    <a class="page-link" herf="">@(page) / @(npages) pages, @(totalitems) items, @(pagesize) per page</a>
                </li>
                <li class="page-item @(page>=npages?"disabled": "")">
                    <a class="page-link" href="~/select?list=@(ViewData["list"])&root=@(ViewData["root"])&page=@(page+1)&pagesize=@(pagesize)">Next</a>
                </li>
            </ul>
        </nav>
    </p>
    <p>
        <a class="btn btn-primary" id="download_link" download="@(ViewData["listfile"])_selected_page@(page).txt" href=”” >Download Selection As <br/>"@(ViewData["listfile"])_selected_page@(page).txt"</a>
    </p>
    <ul>
        @{int i=0;}
        @foreach (var item in (List<SelectItem>)ViewData["items"])
        {
            <li>
                <input type="checkbox" data-path="@(item.origpath)" data-tag="@(item.tag)" id="cb@(i)" /><label for="cb@(i)">
                    <img src="StaticFiles/@item.path" title="@item.tag" class="img-responsive" style="height: 224px;">
                </label>
            </li>
            i++;
        }
    </ul>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-end">
                <li class="page-item @(page<=1?"disabled": "")" href="~/select?list=@(ViewData["list"])">
                    <a class="page-link" href="~/select?list=@(ViewData["list"])&root=@(ViewData["root"])&page=@(page-1)&pagesize=@(pagesize)">Previous</a>
                </li>
                <li class="page-item">
                    <a class="page-link" herf="">@(page) / @(npages) pages, @(totalitems) items, @(pagesize) per page</a>
                </li>
                <li class="page-item @(page>=npages?"disabled": "")">
                    <a class="page-link" href="~/select?list=@(ViewData["list"])&root=@(ViewData["root"])&page=@(page+1)&pagesize=@(pagesize)">Next</a>
                </li>
            </ul>
        </nav>
    </p>
    <p>
        <a class="btn btn-primary" id="download_link" download="@(ViewData["listfile"])_selected_page@(page).txt" href=”” >Download Selection As <br/>"@(ViewData["listfile"])_selected_page@(page).txt"</a>
    </p>
</div>

@section Scripts {
    <script type="text/javascript">
        var downloaded = false;

        function get_selected(){
            var c = $('input[type="checkbox"]:checked:not(:disabled)');
            var files = c.map(function () {
                return $(this).data('path');
            }).get();
            @* var text = files.join('\n');
            var data = new Blob([text], {type: 'text/plain'});
            var url = window.URL.createObjectURL(data);
            document.getElementById('download_link').href = url; *@
            return files;
        }
        $("a#download_link").click(function(){
            var now = get_selected().join('\n') + '\n';
            this.href = "data:text/plain;charset=UTF-8,"  + encodeURIComponent(now);
            downloaded = true;
        });

        var isDirty = function() { return !downloaded && (get_selected().length > 0); }

        window.addEventListener("beforeunload", function (e) {
            if (!isDirty()) {
                return undefined;
            }

            var confirmationMessage = 'It looks like you have selected something. '
                                    + 'If you leave before downloading, your changes will be lost.';

            (e || window.event).returnValue = confirmationMessage; //Gecko + IE
            return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.
        });
    </script>
}
